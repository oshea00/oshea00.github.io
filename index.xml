<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MikesBlog</title>
    <link>https://oshea00.github.io/</link>
    <description>Recent content on MikesBlog</description>
    <generator>Hugo -- 0.146.7</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://oshea00.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vibecoding an Agentic Coder - Part 1</title>
      <link>https://oshea00.github.io/posts/agentic-codegen-part1/</link>
      <pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/agentic-codegen-part1/</guid>
      <description>&lt;p&gt;&lt;figure class=&#34;align-center &#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;images/agentengineer_3_1_aspect_ratio.png#center&#34;/&gt; 
&lt;/figure&gt;

I&amp;rsquo;ve tried Cursor, Replit, Lovable, and Bolt with varying degrees of success and found recurring themes in the use of these tools that require &amp;ldquo;vibing&amp;rdquo; until you arrive at a finished, hopefully working, result. Whether the result is good can sometimes be in the eye of the beholder.&lt;/p&gt;
&lt;p&gt;I’ve also become fascinated by how these tools will change the way programmers think about code and its organization — how many rules will be thrown completely out the window and how, oddly, the new rules will harken back to the early days of programming before Google and the Internet.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLMs At The Command Line - Part 1</title>
      <link>https://oshea00.github.io/posts/aichat-part1/</link>
      <pubDate>Sat, 18 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/aichat-part1/</guid>
      <description>&lt;figure class=&#34;align-center &#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;images/cartoon_terminal.png#center&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;If you are a command-line fan and want to experiment with large language models (LLM), you will love &lt;a href=&#34;https://github.com/sigoden/aichat&#34;&gt;&lt;code&gt;AiChat&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are many popular graphical front ends for working with LLMs, such as OpenAI&amp;rsquo;s ChatGPT, and Anthropic&amp;rsquo;s Claude, but get ready for this little powerhouse for CLI lovers as it has many advanced and useful features.&lt;/p&gt;
&lt;p&gt;One such feature is an easy-to-use, out-of-the-box RAG feature (Retrieval Augmented Generation) useful for searching existing content. I&amp;rsquo;ve put together a small demo here that shows how easy it can be to use in a pinch. There are many use cases where such an approach is just the right size.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Experimenting with Agentic AI Tooling: My Journey Through the Cutting Edge</title>
      <link>https://oshea00.github.io/posts/agentic-ai-tooling-pains/</link>
      <pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/agentic-ai-tooling-pains/</guid>
      <description>&lt;figure class=&#34;align-center &#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;images/agentengineer_3_1_aspect_ratio.png#center&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The first time I fired up an MCP (Model Context Protocol) server plugin, &amp;ldquo;Agent,&amp;rdquo; I was excited to see it registered in Claude Desktop but immediately annoyed by the errors that popped up. I didn&amp;rsquo;t expect a smooth experience in my encounter with the future of Agentic AI, but I found many configuration tweaks, clunky debugging tools, and broken dependencies along the way. It was a stark reminder that we&amp;rsquo;re in the early days, and there&amp;rsquo;s a lot of ground to cover before Agents become seamless collaborators.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Navigating the Fragmented Landscape of Agentic AI Tools</title>
      <link>https://oshea00.github.io/posts/agentic-ai-fragmentation/</link>
      <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/agentic-ai-fragmentation/</guid>
      <description>&lt;figure class=&#34;align-center &#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;images/agentengineer_3_1_aspect_ratio.png#center&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Agentic AI, with its promise of creating systems capable of autonomous reasoning and action, has been a hotbed of innovation
in the AI community. Tools from OpenAI, LangChain, and Microsoft are spearheading this new wave, each offering unique
features and capabilities. However, the lack of standardization in this ecosystem presents significant challenges to developers,
researchers, and organizations eager to adopt these technologies.&lt;/p&gt;
&lt;h2 id=&#34;the-current-state-of-agentic-ai-tools&#34;&gt;The Current State of Agentic AI Tools&lt;/h2&gt;
&lt;p&gt;The diversity of agentic AI tools is both a strength and a weakness. On one hand, it fosters creativity and innovation as
developers explore various approaches to building autonomous systems. On the other hand, the fragmented landscape leads to:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Classify With Confidence</title>
      <link>https://oshea00.github.io/posts/classify-with-confidence/</link>
      <pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/classify-with-confidence/</guid>
      <description>&lt;p&gt;&lt;figure class=&#34;align-center &#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;images/cutepredictioncartoon.png#center&#34;/&gt; 
&lt;/figure&gt;

Large foundation models like GPT can classify text according to a well-crafted prompt instruction, and it&amp;rsquo;s remarkable how well they can do this, considering there has been no explicit training with labeled datasets. This has traditionally been done using machine learning models and logistic regression techniques.&lt;/p&gt;
&lt;p&gt;However, with generative model classification, we lose the &amp;lsquo;confidence level&amp;rsquo; or the probability score of the prediction available in logistic regression. Traditional models like logistic regression provide a probability score for each class, indicating the model&amp;rsquo;s confidence level in its predictions. This confidence score is not just valuable; it&amp;rsquo;s essential for decision-making, as it helps users gauge how confident the model is about its classifications. While generative model responses may align well with the intended classification, we don&amp;rsquo;t directly get an explicit probability for each class. This can be a limitation, particularly in high-stakes applications where knowing the model&amp;rsquo;s confidence level is crucial.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing Prompt Results - A Rose By Any Other Name</title>
      <link>https://oshea00.github.io/posts/a-rose-by-any-other-name/</link>
      <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/a-rose-by-any-other-name/</guid>
      <description>&lt;p&gt;&lt;figure class=&#34;align-center &#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;images/androidrose.png#center&#34;/&gt; 
&lt;/figure&gt;

You might want to test an expected response from a prompt sent to a large language model, but string comparisons will not help you. The inherent variability in large language model (LLM) responses will require you to find new ways to compare generated prompt results.&lt;/p&gt;
&lt;p&gt;There are a few reasons why a generated prompt result will not exactly match a prior result: the prompt itself may have changed, the model parameters may have changed, or the model&amp;rsquo;s inherent variability may inject a small amount of change in the results.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scaling OpenAI With AsyncOpenAI</title>
      <link>https://oshea00.github.io/posts/async-openai/</link>
      <pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/async-openai/</guid>
      <description>&lt;p&gt;As I stood outside and looked at the neighborhood wasteland that post-July 4th left behind, the whiff of gunpowder still hanging in the air, I felt a burst of good neighbor energy flow through me, so I grabbed a broom. Sweeping up the street gave me time to think about the other chores I had for the day, including the writing of a new blog post, and I began to wonder how I could use ChatGPT to help me speed some things up.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transformers -  Positional Encoding</title>
      <link>https://oshea00.github.io/posts/transformers-positional-encoding/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/transformers-positional-encoding/</guid>
      <description>&lt;p&gt;Since transformer input is processed in parallel rather than serially, it is necessary to encode the relative positions of the input sequence of tokens in some way. The positional encoding in the transformer model uses sinusoidal functions to create a unique encoding for each position.&lt;/p&gt;
&lt;p&gt;In working through the article on Transformers, as described in the original paper &lt;a href=&#34;https://arxiv.org/pdf/1706.03762&#34;&gt;&amp;ldquo;Attention is All You Need&amp;rdquo; by Vaswani et al.&lt;/a&gt;, the following formulas are used to encode the PE tensor values:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fine-tuning Llama3</title>
      <link>https://oshea00.github.io/posts/finetuning-llama3-8b/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/finetuning-llama3-8b/</guid>
      <description>&lt;p&gt;Since Llama3 was released, the &lt;a href=&#34;https://pytorch.org/torchtune/stable/tutorials/llama3.html&#34;&gt;PyTorch llama3&lt;/a&gt; documentation has a few glitches pointing at configurations in torchtune that are still referencing Llama2. &lt;a href=&#34;https://llama.meta.com/docs/how-to-guides/fine-tuning/&#34;&gt;The meta website&lt;/a&gt; is a little more up-to-date, but the documentation is a little light on details. So, I
wrote this article to bring everything together.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;ll want to use Python 3.11 &lt;a href=&#34;https://github.com/pytorch/pytorch/issues/120233&#34;&gt;until Torch compile supports Python 3.12&lt;/a&gt; , and I recommend setting up a virtual environment for this using &lt;code&gt;venv&lt;/code&gt; or &lt;code&gt;pipenv&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://pytorch.org/torchtune/stable/install.html#install-label&#34;&gt;torchtune&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install torchtune
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/EleutherAI/lm-evaluation-harness&#34;&gt;EleutherAI&amp;rsquo;s Evaluation Harness&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install &lt;span class=&#34;nv&#34;&gt;lm_eval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;0.4.*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;download-llama3-8b-model&#34;&gt;Download Llama3-8B model&lt;/h2&gt;
&lt;p&gt;You will need to get access to Llama3 via instructions on the &lt;a href=&#34;https://github.com/meta-llama/llama3/blob/main/README.md&#34;&gt;official Meta Llama3&lt;/a&gt; page. You will also need your Hugging Face token setup from &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAI Python API Compatibility</title>
      <link>https://oshea00.github.io/posts/openai-compatible-apis/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/openai-compatible-apis/</guid>
      <description>&lt;p&gt;An increasing number of open-sourced generative AI large language models (LLM) are being hosted behind an OpenAI API-compatible endpoint or have tools that offer an OpenAI API. The Python library for accessing OpenAI is just a REST client, and the library provides a way to specify the URL and an API key, as well as the model being offered by the provider.&lt;/p&gt;
&lt;p&gt;Here are a few examples of how the OpenAI library is used with other open-source models.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
