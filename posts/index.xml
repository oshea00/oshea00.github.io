<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on MyAIStuff</title>
    <link>https://oshea00.github.io/posts/</link>
    <description>Recent content in Posts on MyAIStuff</description>
    <generator>Hugo -- 0.126.1</generator>
    <language>en</language>
    <lastBuildDate>Mon, 27 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://oshea00.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Transformers -  Positional Encoding</title>
      <link>https://oshea00.github.io/posts/transformers-positional-encoding/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/transformers-positional-encoding/</guid>
      <description>Since transformer input is processed in parallel rather than serially, it is necessary to encode the relative positions of the input sequence of tokens in some way. The positional encoding in the transformer model uses sinusoidal functions to create a unique encoding for each position.
In working through the article on Transformers, as described in the original paper &amp;ldquo;Attention is All You Need&amp;rdquo; by Vaswani et al., the following formulas are used to encode the PE tensor values:</description>
    </item>
    <item>
      <title>Fine-tuning Llama3</title>
      <link>https://oshea00.github.io/posts/finetuning-llama3-8b/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/finetuning-llama3-8b/</guid>
      <description>Since Llama3 was released, the PyTorch llama3 documentation has a few glitches pointing at configurations in torchtune that are still referencing Llama2. The meta website is a little more up-to-date, but the documentation is a little light on details. So, I wrote this article to bring everything together.
Prerequisites You&amp;rsquo;ll want to use Python 3.11 until Torch compile supports Python 3.12 , and I recommend setting up a virtual environment for this using venv or pipenv.</description>
    </item>
    <item>
      <title>OpenAI Python API Compatibility</title>
      <link>https://oshea00.github.io/posts/openai-compatible-apis/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate>
      <guid>https://oshea00.github.io/posts/openai-compatible-apis/</guid>
      <description>An increasing number of open-sourced generative AI large language models (LLM) are being hosted behind an OpenAI API-compatible endpoint or have tools that offer an OpenAI API. The Python library for accessing OpenAI is just a REST client, and the library provides a way to specify the URL and an API key, as well as the model being offered by the provider.
Here are a few examples of how the OpenAI library is used with other open-source models.</description>
    </item>
  </channel>
</rss>
